let assets = require( '../index' );
let chai = require( 'chai' );
let chaiMoment = require( 'chai-moment-js' );
let dirtyChai = require( 'dirty-chai' );
let fs = require( 'fs-extra' );
let Metalsmith = require( 'metalsmith' );
let path = require( 'path' );
let _ = require( 'lodash' );

let metalsmithReplacer = require( '../lib/utilities/metalsmithReplacer' );
let saveMetadata = require( '../lib/utilities/saveMetadata' );

let helpers = require( '../lib/file-test-helpers' );

chai.use( chaiMoment );
chai.use( dirtyChai );
let expect = chai.expect;

let compareFileStats = function( expected, actual ) {
    let expectedFiles = _.keys( expected );
    let actualFiles = _.keys( actual );
    // console.log( '>>> Expected <<<\n', JSON.stringify( expectedFiles, null, 2 ) );
    // console.log( '>>> Actual <<<\n', JSON.stringify( actualFiles, null, 2 ) );

    expect( actualFiles ).to.include.members( expectedFiles );

    expectedFiles.forEach( file => {
        let actualStat = actual[ file ];
        let expectedStat = expected[ file ];
        expect( expectedStat.size ).to.equal( actualStat.size );

        // Because copying the time stamps only works to the second and drops
        // milliseconds, we need a little fudge factor here
        expect( expectedStat.mtime, `>>> ${file} <<<` ).is.same.moment( actualStat.mtime, 'second' );
    } );
};

/**
 * Creates a file in both the source and destination directories. The file name
 * is `sample-XXX.txt` (where XXX is a random integer) and contains some lorem
 * ipsum text. If the destination and source files have differing timestamps,
 * then the name will be `sample-XXX-YYY.txt`, where YYY indicates whether the
 * **destination** file is OLD or NEW relative to the source file.
 * @param {Object} [options] The options object as passed to the `assets`
 * function. Unlike that function, this test helper does **not** accept an
 * array of configuration objects.
 * @param {Boolean} [old] A flag to indicate whether the destination file
 * should be older (`true`), newer (`false`), or have the same timestamp
 * (`undefined`) as the source file
 */
// let createTempFile = function( options, old ) {
//     // Lorem ipsum generated by [Samuel L. Ipsum](http://slipsum.com/)
//     let badMoFo =
// `Now that there is the Tec-9, a crappy spray gun from South Miami. This gun is
// advertised as the most popular gun in American crime. Do you believe that
// shit? It actually says that in the little book that comes with it: the most
// popular gun in American crime. Like they're actually proud of that shit.
//
// The path of the righteous man is beset on all sides by the iniquities of the
// selfish and the tyranny of evil men. Blessed is he who, in the name of charity
// and good will, shepherds the weak through the valley of darkness, for he is
// truly his brother's keeper and the finder of lost children. And I will strike
// down upon thee with great vengeance and furious anger those who would attempt
// to poison and destroy My brothers. And you will know My name is the Lord when
// I lay My vengeance upon thee.
//
// You think water moves fast? You should see ice. It moves like it has a mind.
// Like it knows it killed the world once and got a taste for murder. After the
// avalanche, it took us a week to climb out. Now, I don't know exactly when we
// turned on each other, but I know that seven of us survived the slide... and
// only five made it out. Now we took an oath, that I'm breaking now. We said
// we'd say it was the snow that killed the other two, but it wasn't. Nature is
// lethal but it doesn't hold a candle to man.
//
// Normally, both your asses would be dead as fucking fried chicken, but you
// happen to pull this shit while I'm in a transitional period so I don't wanna
// kill you, I wanna help you. But I can't give you this case, it don't belong to
// me. Besides, I've already been through too much shit this morning over this
// case to hand it over to your dumb ass.
//
// Look, just because I don't be givin' no man a foot massage don't make it right
// for Marsellus to throw Antwone into a glass motherfuckin' house, fuckin' up
// the way the n***** talks. Motherfucker do that shit to me, he better paralyze
// my ass, 'cause I'll kill the motherfucker, know what I'm sayin'?
// `;
//     // Get paths to the source and destination files
//     let paths = getPaths( options );
//     let rando = _.padStart( Math.floor( Math.random() * 1000 ), 3, 0 );
//     let filenameParts = [ 'sample', rando ];
//     if ( old === undefined ) {
//         filenameParts = _.concat( filenameParts, _.toString( old ) );
//     }
//     let filename = _.join( filenameParts, '-' ) + '.txt';
//     let sourcePath = path.resolve( paths.src, filename );
//     let destinationPath = path.resolve( paths.dest, filename );
//
//     // Write data to the files
//     fs.outputFileSync( sourcePath, badMoFo );
//     fs.outputFileSync( destinationPath, badMoFo );
//
//     // Set timestamps
//     if ( _.isBoolean( old ) ) {
//         let duration = moment.duration( {
//             seconds: 22,
//             minutes: 37,
//             hours: 19,
//             days: 2
//         } );
//         let srcStat = fs.statSync( sourcePath );
//         let dstAtime = srcStat.atime.clone();
//         let dstMtime = srcStat.mtime.clone();
//         if ( old ) {
//             dstMtime.add( duration );
//         } else {
//             dstMtime.subtract( duration );
//         }
//         fs.utimesSync( destinationPath, dstAtime, dstMtime );
//     }
// };

/**
 * Gets an object containing the expected results of executing the "assets
 * improved" plugin.
 * @param {String} fixturePath The path to the test fixture
 * @param {Object} [options] The options object as passed to the `assets`
 * function. Unlike that function, this test helper does **not** accept an
 * array of configuration objects.
 * @returns {Object} An "expected properties" object with the following
 * properties:
 *   @property {String} src Absolute path to the source directory for the
 *   test.
 *   @property {String} dest Absolute path to destination directory for the
 *   test.
 *   @property {Object} files An object having filenames from `src` as its
 *   keys and corresponding `fs.Stats` objects for values.
 * Any additional properties on the optional `options` object will be
 * copied to this object.
 */
let getExpected = function( fixturePath, options ) {
    let expected = helpers.getPaths( fixturePath, options );
    expected.files = helpers.readFileStats( expected.src );
    return expected;
};

describe( 'metalsmith-assets-improved', function() {
    const fixtureRoot = path.resolve( __dirname, 'fixtures' );

    before( function() {
        fs.removeSync( fixtureRoot + '/*/build' );
    } );

    context( '(when given a configuration object)', function() {

        it( 'copies files from the default source directory to the default destination directory', function( done ) {
            let fixturePath = path.resolve( fixtureRoot, 'basic' );
            let metalsmith = Metalsmith( fixturePath );
            metalsmith
                .use( assets() )
                .build( function( err ) {
                    if ( err ) return done( err );

                    let expected = getExpected( fixturePath );
                    let actualFiles = helpers.readFileStats( path.resolve( fixturePath, 'build', '.' ) );
                    compareFileStats( expected.files, actualFiles );
                    done();
                } );
        } );

        it( 'copies files from a configured source directory to a configured destination directory', function( done ) {
            let fixturePath = path.resolve( fixtureRoot, 'custom' );
            let metalsmith = Metalsmith( fixturePath );
            let assetOptions = {
                src: 'static',
                dest: 'static'
            };
            metalsmith
                .use( assets( assetOptions ) )
                .build( function( err ) {
                    if ( err ) return done( err );

                    let expected = getExpected( fixturePath, assetOptions );
                    let actualFiles = helpers.readFileStats( path.resolve( fixturePath, 'build', assetOptions.dest ) );
                    compareFileStats( expected.files, actualFiles );
                    done();
                } );
        } );

        it( 'does not overwrite files when no "replace" option is given' );
        it( 'does not overwrite files when the "replace" option is set to "none"' );
        it( 'copies only new files when the "replace" option is set to "none"' );
        it( 'overwrites files when the "replace" option is set to "all"' );
        it( 'only overwrites older files when the "replace" option is set to "old"' );
    } );

    context( '(when given an array of configuration objects)', function() {
        it( 'copies files from all configured source directories to all configured destination directories' );
        it( 'correctly observes the "replace" option of each config object' );
    } );

} );
